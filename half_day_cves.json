{
  "CVE-2024-0605": {
    "cvss": "-",
    "description": "Using a javascript: URI with a setTimeout race condition, an attacker can execute unauthorized scripts on top origin sites in urlbar. This bypasses security measures, potentially leading to arbitrary code execution or unauthorized actions within the user's loaded webpage. This vulnerability affects Focus for iOS < 122.",
    "published": "2024-01-22T19:15:09.423",
    "keywords": "execution,bypass"
  },
  "CVE-2024-23181": {
    "cvss": "-",
    "description": "Cross-site scripting vulnerability in a-blog cms Ver.3.1.x series versions prior to Ver.3.1.7, Ver.3.0.x series versions prior to Ver.3.0.29, Ver.2.11.x series versions prior to Ver.2.11.58, Ver.2.10.x series versions prior to Ver.2.10.50, and Ver.2.9.0 and earlier allows a remote unauthenticated attacker to execute an arbitrary script on the logged-in user's web browser.",
    "published": "2024-01-23T10:15:10.493",
    "keywords": "remote,unauthenticated"
  },
  "CVE-2024-22076": {
    "cvss": "-",
    "description": "MyQ Print Server before 8.2 patch 43 allows Unauthenticated Remote Code Execution.",
    "published": "2024-01-23T11:15:09.233",
    "keywords": "remote,execution,unauthenticated"
  },
  "CVE-2024-0804": {
    "cvss": "-",
    "description": "Insufficient policy enforcement in iOS Security UI in Google Chrome prior to 121.0.6167.85 allowed a remote attacker to leak cross-origin data via a crafted HTML page. (Chromium security severity: Medium)",
    "published": "2024-01-24T00:15:07.720",
    "keywords": "remote,leak"
  },
  "CVE-2024-0809": {
    "cvss": "-",
    "description": "Inappropriate implementation in Autofill in Google Chrome prior to 121.0.6167.85 allowed a remote attacker to bypass Autofill restrictions via a crafted HTML page. (Chromium security severity: Low)",
    "published": "2024-01-24T00:15:08.003",
    "keywords": "remote,bypass"
  },
  "CVE-2024-23633": {
    "cvss": 4.7,
    "description": "Label Studio, an open source data labeling tool had a remote import feature allowed users to import data from a remote web source, that was downloaded and could be viewed on the website. Prior to version 1.10.1, this feature could had been abused to download a HTML file that executed malicious JavaScript code in the context of the Label Studio website. Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.\n\n`data_import/uploader.py` lines 125C5 through 146 showed that if a URL passed the server side request forgery verification checks, the contents of the file would be downloaded using the filename in the URL. The downloaded file path could then be retrieved by sending a request to `/api/projects/{project_id}/file-uploads?ids=[{download_id}]` where `{project_id}` was the ID of the project and `{download_id}` was the ID of the downloaded file. Once the downloaded file path was retrieved by the previous API endpoint, `data_import/api.py`lines 595C1 through 616C62 demonstrated that the `Content-Type` of the response was determined by the file extension, since `mimetypes.guess_type` guesses the `Content-Type` based on the file extension. Since the `Content-Type` was determined by the file extension of the downloaded file, an attacker could import in a `.html` file that would execute JavaScript when visited.\n\nVersion 1.10.1 contains a patch for this issue. Other remediation strategies are also available. For all user provided files that are downloaded by Label Studio, set the `Content-Security-Policy: sandbox;` response header when viewed on the site. The `sandbox` directive restricts a page's actions to prevent popups, execution of plugins and scripts and enforces a `same-origin` policy. Alternatively, restrict the allowed file extensions that may be downloaded.",
    "published": "2024-01-24T00:15:08.373",
    "keywords": "remote,execution"
  },
  "CVE-2024-23897": {
    "cvss": "-",
    "description": "Jenkins 2.441 and earlier, LTS 2.426.2 and earlier does not disable a feature of its CLI command parser that replaces an '@' character followed by a file path in an argument with the file's contents, allowing unauthenticated attackers to read arbitrary files on the Jenkins controller file system.",
    "published": "2024-01-24T18:15:09.370",
    "keywords": "unauthenticated,command"
  },
  "CVE-2024-23904": {
    "cvss": "-",
    "description": "Jenkins Log Command Plugin 1.0.2 and earlier does not disable a feature of its command parser that replaces an '@' character followed by a file path in an argument with the file's contents, allowing unauthenticated attackers to read content from arbitrary files on the Jenkins controller file system.",
    "published": "2024-01-24T18:15:09.707",
    "keywords": "unauthenticated,command"
  },
  "CVE-2024-0879": {
    "cvss": 6.5,
    "description": "\nAuthentication bypass in vector-admin allows a user to register to a vector-admin server while \u201cdomain restriction\u201d is active, even when not owning an authorized email address.\n\n\n",
    "published": "2024-01-25T15:15:07.713",
    "keywords": "authentication,bypass"
  },
  "CVE-2024-0822": {
    "cvss": 9.1,
    "description": "An authentication bypass vulnerability was found in overt-engine. This flaw allows the creation of users in the system without authentication due to a flaw in the CreateUserSession command.",
    "published": "2024-01-25T16:15:08.743",
    "keywords": "authentication,command,bypass"
  },
  "CVE-2024-22749": {
    "url": "https://github.com/gpac/gpac/issues/2713",
    "cvss": "-",
    "description": "GPAC v2.3 was detected to contain a buffer overflow via the function gf_isom_new_generic_sample_description function in the isomedia/isom_write.c:4577",
    "published": "2024-01-25T16:15:09.010"
  }
}