{
  "CVE-2024-0815": {
    "cvss": 9.3,
    "description": "Command injection in paddle.utils.download._wget_download (bypass filter) in paddlepaddle/paddle 2.6.0",
    "published": "2024-03-07T04:15:07.143",
    "keywords": "command,bypass"
  },
  "CVE-2024-28213": {
    "cvss": "-",
    "description": "nGrinder before 3.5.9 allows to accept serialized Java objects from unauthenticated users, which could allow remote attacker to execute arbitrary code via unsafe Java objects deserialization.",
    "published": "2024-03-07T05:15:54.710",
    "keywords": "remote,unauthenticated"
  },
  "CVE-2024-1720": {
    "cvss": 4.7,
    "description": "The User Registration \u2013 Custom Registration Form, Login Form, and User Profile WordPress Plugin plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'Display Name' parameter in all versions up to, and including, 3.1.4 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. This vulnerability requires social engineering to successfully exploit, and the impact would be very limited due to the attacker requiring a user to login as the user with the injected payload for execution.",
    "published": "2024-03-07T06:15:50.630",
    "keywords": "execution,unauthenticated"
  },
  "CVE-2024-0917": {
    "cvss": 9.4,
    "description": "remote code execution in paddlepaddle/paddle 2.6.0",
    "published": "2024-03-07T09:15:38.527",
    "keywords": "remote,execution"
  },
  "CVE-2024-1382": {
    "cvss": 8.8,
    "description": "The Restaurant Reservations plugin for WordPress is vulnerable to Local File Inclusion in all versions up to, and including, 1.9 via the nd_rst_layout attribute of the nd_rst_search shortcode. This makes it possible for authenticated attackers, with contributor-level access and above, to include and execute arbitrary PHP files on the server, allowing the execution of any PHP code in those files. This can be used to bypass access controls, obtain sensitive data, or achieve code execution in cases where an uploaded PHP file may not be directly accessible.",
    "published": "2024-03-07T09:15:38.723",
    "keywords": "execution,sensitive,bypass"
  },
  "CVE-2024-1986": {
    "cvss": 8.8,
    "description": "The Booster Elite for WooCommerce plugin for WordPress is vulnerable to arbitrary file uploads due to missing file type validation in the wc_add_new_product() function in all versions up to, and including, 7.1.7. This makes it possible for customer-level attackers, and above, to upload arbitrary files on the affected site's server which may make remote code execution possible. This is only exploitable when the user product upload functionality is enabled.",
    "published": "2024-03-07T21:15:08.013",
    "keywords": "remote,execution"
  },
  "CVE-2024-2044": {
    "url": "https://github.com/pgadmin-org/pgadmin4/issues/7258",
    "cvss": 4.6,
    "description": "pgAdmin 4 uses a file-based session management approach. The session files are saved on disk as pickle objects. When a user performs a request, the value of the session cookie 'pga4_session' is used to retrieve the file, then its content is deserialised, and finally its signature verified.\nThe cookie value is split in 2 parts at the first '!' character. The first part is the session ID (sid), while the second is the session digest.\n The vulnerability lies in versions of pgAdmin prior to 8.4 where a method loads session files by concatenating the sessions folder - located inside the pgAdmin 4 DATA_DIR - with the session ID. Precisely, the two values are concatenated using the ['os.path.join'] function. It does not set a trusted base-path which should not be escaped\n",
    "published": "2024-03-07T21:15:08.767"
  },
  "CVE-2024-2265": {
    "cvss": 5.3,
    "description": "A vulnerability, which was classified as problematic, was found in keerti1924 PHP-MYSQL-User-Login-System 1.0. This affects an unknown part of the file login.sql. The manipulation leads to inclusion of sensitive information in source code. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-256035. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
    "published": "2024-03-07T22:15:58.220",
    "keywords": "remote,sensitive"
  },
  "CVE-2024-23239": {
    "cvss": "-",
    "description": "A race condition was addressed with improved state handling. This issue is fixed in tvOS 17.4, iOS 17.4 and iPadOS 17.4, macOS Sonoma 14.4, watchOS 10.4. An app may be able to leak sensitive user information.",
    "published": "2024-03-08T02:15:48.063",
    "keywords": "sensitive,leak"
  },
  "CVE-2024-23241": {
    "cvss": "-",
    "description": "This issue was addressed through improved state management. This issue is fixed in tvOS 17.4, iOS 17.4 and iPadOS 17.4, macOS Sonoma 14.4. An app may be able to leak sensitive user information.",
    "published": "2024-03-08T02:15:48.153",
    "keywords": "sensitive,leak"
  },
  "CVE-2024-26309": {
    "cvss": 5.3,
    "description": "Archer Platform 6.x before 6.14 P2 HF2 (6.14.0.2.2) contains a sensitive information disclosure vulnerability. An unauthenticated attacker could potentially obtain access to sensitive information via an internal URL.",
    "published": "2024-03-08T02:15:50.640",
    "keywords": "unauthenticated,sensitive"
  }
}